package com.contrast.Contrast.presentation.features.main.home.ui

import androidx.compose.foundation.*
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.ClickableText
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.contrast.Contrast.R
import com.contrast.Contrast.presentation.components.alertDialog.FaceIDAuthDialog
import com.contrast.Contrast.presentation.components.alertDialog.FaceIDPermissionDialog
import com.contrast.Contrast.presentation.components.alertDialog.FeedbackSuccessDialog
import com.contrast.Contrast.presentation.components.slider.ImageSlider
import com.contrast.Contrast.presentation.components.text.CustomText
import com.contrast.Contrast.presentation.features.feedback.FeedbackDialog
import com.contrast.Contrast.presentation.features.payment.ui.LockVerificationDialog
import com.contrast.Contrast.presentation.theme.FCFCFC
import com.contrast.Contrast.presentation.theme.FFFCFCFC

@Preview(showBackground = true)
@Composable
fun HomePage() {
    var showDialog by remember { mutableStateOf(false) }
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(FCFCFC)
            .verticalScroll(rememberScrollState())
            .padding(horizontal = 16.dp)
    ) {
        Spacer(modifier = Modifier.height(16.dp))

        /** üîπ HEADER */
        /** üîπ HEADER */
        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Row(verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.weight(1f)) {
                Image(
                    painter = painterResource(id = R.drawable.avatar1),
                    contentDescription = "Avatar",
                    modifier = Modifier.size(40.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Column {
                    CustomText("Contrast xin ch√†o üëã", fontSize = 12.sp, color = Color.Gray)
                    CustomText("Nguy√™ÃÉn PhuÃÅc Phong", fontSize = 16.sp, fontWeight = FontWeight.Bold)
                }
            }
            Row {
                IconButton(onClick = { /* TODO: Notifications */ }) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_notification),
                        tint = Color.Red,
                        contentDescription = "Th√¥ng b√°o"
                    )
                }
                IconButton(onClick = { /* TODO: Wallet */ }) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_wallet),
                        tint = Color.Red,
                        contentDescription = "N·∫°p ti·ªÅn"

                    )
                }
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        /** üîπ S·ªê D∆Ø */

        WalletBalanceView()

        Spacer(modifier = Modifier.height(16.dp))

        /** üîπ BANNER QU·∫¢NG C√ÅO */
        ImageSlider(10.dp)

        Spacer(modifier = Modifier.height(16.dp))

        /** üîπ S·ª∞ KI·ªÜN ƒêANG DI·ªÑN RA */


        Text(
            text = "S·ª± ki·ªán ƒëang di·ªÖn ra",
            style = TextStyle(
                fontSize = 14.sp,
                lineHeight = 24.sp,
                fontFamily = FontFamily(Font(R.font.inter_18pt_medium)),
                fontWeight = FontWeight(500),
                color = Color(0xFF151515),
            )
        )
        Spacer(modifier = Modifier.height(16.dp))
        LazyRow(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp) // üî• Th√™m kho·∫£ng c√°ch gi·ªØa c√°c item
        ) {
            items(listOf(
                "T·∫∑ng Sticker ch√∫c m·ª´ng ng√†y Qu·ªëc Kh√°nh 2-9",
                "ƒê·ªïi b·∫°n c√πng ti·ªÅn",
                "Mua 1 t·∫∑ng 1 ng√†y h·ªôi c√† ph√™"
            )) { event ->
                EventCard("10 ",
                    "TH6",
                    "T·∫∑ng Sticker ch√∫c m·ª´ng ng√†y Qu·ªëc Kh√°nh 2-9",
                    "Mua ƒë∆∞∆°Ã£c giaÃâm giaÃÅ")
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        /** üîπ DANH S√ÅCH C·ª¨A H√ÄNG */
        Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {


            Text(
                text = "Danh s√°ch c·ª≠a h√†ng",
                style = TextStyle(
                    fontSize = 14.sp,
                    fontFamily = FontFamily(Font(R.font.inter_18pt_medium)),
                    fontWeight = FontWeight(500),
                    color = Color(0xFF151515),
                    textAlign = TextAlign.Center,
                )
            )
            ClickableText(
                text = AnnotatedString("XEM T·∫§T C·∫¢"),

                onClick = { /* TODO: Xem t·∫•t c·∫£ c·ª≠a h√†ng */ },
                style = TextStyle(color = Color.Red, fontSize = 14.sp)
            )
        }
        Spacer(modifier = Modifier.height(16.dp))
        LazyRow(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp) // üî• Kho·∫£ng c√°ch gi·ªØa c√°c c·ª≠a h√†ng
        ) {
            items(listOf(
                Pair("3,5 km", "Contrast VƒÉn Ch∆∞∆°ng"),
                Pair("4,2 km", "Contrast T√¥ Hi·ªáu"),
                Pair("2,1 km", "Contrast Tr·∫ßn Duy H∆∞ng")
            )) { (distance, name) ->
                StoreCard( name, "ƒê·ªãa ch·ªâ chi ti·∫øt ·ªü ƒë√¢y...")
            }}

        Spacer(modifier = Modifier.height(16.dp))

        /** üîπ N√öT PH·∫¢N H·ªíI */
        Button(
            onClick = { showDialog = true },
            colors = ButtonDefaults.buttonColors(backgroundColor = Color.White),
            shape = RoundedCornerShape(8.dp),
            elevation = ButtonDefaults.elevation(6.dp),
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp)
                .padding(horizontal = 90.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.Start
            ) {
                Box(
                    modifier = Modifier
                        .size(40.dp)
                        .background(Color.Red, shape = CircleShape),
                    contentAlignment = Alignment.Center
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.feedback),
                        contentDescription = "Feedback Icon",
                        modifier = Modifier.size(24.dp)
                    )
                }

                Spacer(modifier = Modifier.width(12.dp))

                Text(
                    text = "Ph·∫£n h·ªìi",
                    style = TextStyle(
                        fontSize = 12.sp,
                        lineHeight = 16.8.sp,
                        fontFamily = FontFamily(Font(R.font.inter_18pt_medium)),
                        fontWeight = FontWeight(400),
                        color = Color(0xFF1D1D1D),
                    )
                )
            }
        }

//        FeedbackDialog(
//            showDialog = showDialog,
//            onDismiss = { showDialog = false },
//            onContinue = { selectedBranch ->
//                showDialog = false
//                println("Ng∆∞·ªùi d√πng ch·ªçn c∆° s·ªü: $selectedBranch")
//            }
//        )

        Spacer(modifier = Modifier.height(16.dp))


        // y√™u c√¢ÃÄu v√¢n tay
//        BiometricDisableDialog(
//            onDisableBiometric = { showDialog = false },
//            onDismiss = { showDialog = false }
//        )

//        CongratulationsDialog(
//            onDismiss = { showDialog = false },
//            onRedeem = { showDialog = false }
//        )
//
//        CustomAlertDialog(
//            "ThaÃÄnh c√¥ng",
//            onDismiss = { showDialog = false }
//        )


//        LockVerificationDialog(
//            showDialog = true,
//            onDismiss = { showDialog = false }
//        )

//        FaceIDAuthDialog(
//            onDismiss = { showDialog = false }
//        )


//        FaceIDPermissionDialog(
//            onConfirm = { showDialog = false },
//            onDismiss = { showDialog = false }
//        )

        // thoong bao phaÃân h√¥ÃÄi thaÃÄnh c√¥ng
//        FeedbackSuccessDialog(
//            onDismiss = { showDialog = false }
//        )

    }
}
@Composable
fun WalletBalanceView() {
    Spacer(modifier = Modifier.height(16.dp))
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        // üîπ Card hi·ªÉn th·ªã s·ªë d∆∞
        Card(
            modifier = Modifier
                .weight(1f) // Chi·∫øm to√†n b·ªô ph·∫ßn c√≤n l·∫°i
                .clip(RoundedCornerShape(8.dp)), // Bo g√≥c
            backgroundColor = Color.Black, // N·ªÅn ƒëen
            elevation = 4.dp // B√≥ng ƒë·ªï nh·∫π
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 12.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column {
                    CustomText("V√≠ c·ªßa t√¥i", fontSize = 14.sp, color = Color.White)
                    Spacer(modifier = Modifier.height(4.dp))
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        CustomText(
                            "ƒë 8,656.60",
                            fontSize = 20.sp,
                            fontWeight = FontWeight.Bold,
                            color = Color.White
                        )
                        Spacer(modifier = Modifier.width(4.dp))
                        Icon(
                            painter = painterResource(id = R.drawable.arrowright),
                            contentDescription = "Xem chi ti·∫øt",
                            tint = Color.White
                        )
                    }
                }
            }
        }

        Spacer(modifier = Modifier.width(12.dp))

        // üîπ N√∫t "N·∫°p ti·ªÅn"
        Box(
            modifier = Modifier
                .height(78.dp) // üî• ƒê·∫∑t chi·ªÅu cao c·ªë ƒë·ªãnh
                .width(130.dp) // üî• ƒê·ªãnh k√≠ch th∆∞·ªõc gi·ªëng thi·∫øt k·∫ø
                .border(1.dp, Color.Black, shape = RoundedCornerShape(8.dp)) // üî• Vi·ªÅn ƒëen
        ) {
            Button(
                onClick = { /* TODO: X·ª≠ l√Ω n·∫°p ti·ªÅn */ },
                colors = ButtonDefaults.buttonColors(backgroundColor = Color.Red),
                shape = RoundedCornerShape(8.dp),
                modifier = Modifier.fillMaxSize() // üî• ƒê·∫£m b·∫£o n√∫t full trong Box
            ) {
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Icon(
                        painter = painterResource(id = R.drawable.plus),
                        contentDescription = "Th√™m",
                        tint = Color.White,
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Text("N·∫°p ti·ªÅn", color = Color.White, fontSize = 14.sp)
                }
            }
        }

    }
}
